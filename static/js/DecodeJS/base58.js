// Generated by CoffeeScript 1.8.0
(function() {
    var ALPHABET, ALPHABET_MAP, Base58, i;
  
    Base58 = (typeof module !== "undefined" && module !== null ? module.exports : void 0) || (window.Base58 = {});
  
    ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  
    ALPHABET_MAP = {};
  
    i = 0;
  
    while (i < ALPHABET.length) {
      ALPHABET_MAP[ALPHABET.charAt(i)] = i;
      i++;
    }
  
    Base58.encode = function(buffer) {
      var carry, digits, j;
      if (buffer.length === 0) {
        return "";
      }
      i = void 0;
      j = void 0;
      digits = [0];
      i = 0;
      while (i < buffer.length) {
        j = 0;
        while (j < digits.length) {
          digits[j] <<= 8;
          j++;
        }
        digits[0] += buffer[i];
        carry = 0;
        j = 0;
        while (j < digits.length) {
          digits[j] += carry;
          carry = (digits[j] / 58) | 0;
          digits[j] %= 58;
          ++j;
        }
        while (carry) {
          digits.push(carry % 58);
          carry = (carry / 58) | 0;
        }
        i++;
      }
      i = 0;
      while (buffer[i] === 0 && i < buffer.length - 1) {
        digits.push(0);
        i++;
      }
      return digits.reverse().map(function(digit) {
        return ALPHABET[digit];
      }).join("");
    };
  
    Base58.decode = function(string) {
      var bytes, c, carry, j;
      if (string.length === 0) {
        return new (typeof Uint8Array !== "undefined" && Uint8Array !== null ? Uint8Array : Buffer)(0);
      }
      i = void 0;
      j = void 0;
      bytes = [0];
      i = 0;
      while (i < string.length) {
        c = string[i];
        if (!(c in ALPHABET_MAP)) {
          throw "Base58.decode received unacceptable input. Character '" + c + "' is not in the Base58 alphabet.";
        }
        j = 0;
        while (j < bytes.length) {
          bytes[j] *= 58;
          j++;
        }
        bytes[0] += ALPHABET_MAP[c];
        carry = 0;
        j = 0;/* based on https://github.com/jbenet/go-base58/blob/master/base58.go */

        var base58 = {
            alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
            bigRadix: new BigInteger("58"),
        
            byte_array: function(s) {
                var arr = [];
                for (var i = 0; i < s.length; i++) {
                    arr.push(s.charCodeAt(i));
                }
                return arr;
            },
            string: function(arr) {
                var s = '';
                for (var i = 0; i < arr.length; i++) {
                    s += String.fromCharCode(arr[i]);
                }
                return s;
            },
        
            // take byte array as input, give string as output
            encode: function(plain) {
                // create a copy with an extra leading 0 byte so that BigInteger
                // doesn't treat "plain" as a two's-complement value
                var plain_with_leading_zero = plain.slice();
                plain_with_leading_zero.unshift(0);
                var x = new BigInteger(plain_with_leading_zero, 256);
        
                var answer = '';
        
                while (x.compareTo(BigInteger.ZERO) > 0) {
                    var mod = new BigInteger();
                    x.divRemTo(base58.bigRadix, x, mod);
                    answer = base58.alphabet.charAt(Number(mod.toString())) + answer;
                }
        
                for (var i = 0; i < plain.length; i++) {
                    if (plain[i] != 0)
                        break;
                    answer = base58.alphabet.charAt(0) + answer;
                }
        
                return answer;
            },
            // take string as input, give byte array as output
            decode: function(encoded) {
                if (encoded == '')
                    return '';
        
                var answer = new BigInteger("0");
                var j = new BigInteger("1");
        
                for (var i = encoded.length-1; i >= 0; i--) {
                    var tmp = base58.alphabet.indexOf(encoded.charAt(i));
                    if (tmp == -1) {
                        // TODO: throw error?
                        return undefined;
                    }
                    var idx = new BigInteger("" + tmp);
                    var tmp1 = new BigInteger(j.toString());
                    tmp1.dMultiply(idx);
                    answer = answer.add(tmp1);
                    j.dMultiply(base58.bigRadix);
                }
        
                var ans = answer.toByteArray();
                while (ans[0] == 0)
                    ans.shift();
        
                for (var i = 0; i < encoded.length; i++) {
                    if (encoded.charAt(i) != base58.alphabet[0]) {
                        break;
                    }
                    ans.unshift(0);
                }
        
                return ans;
            },
        };
        while (j < bytes.length) {
          bytes[j] += carry;
          carry = bytes[j] >> 8;
          bytes[j] &= 0xff;
          ++j;
        }
        while (carry) {
          bytes.push(carry & 0xff);
          carry >>= 8;
        }
        i++;
      }
      i = 0;
      while (string[i] === "1" && i < string.length - 1) {
        bytes.push(0);
        i++;
      }
      return new (typeof Uint8Array !== "undefined" && Uint8Array !== null ? Uint8Array : Buffer)(bytes.reverse());
    };
  
  }).call(this);